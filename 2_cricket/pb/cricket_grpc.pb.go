// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/cricket.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Cricket_GetTopScorers_FullMethodName     = "/pb.Cricket/getTopScorers"
	Cricket_GetCenturions_FullMethodName     = "/pb.Cricket/getCenturions"
	Cricket_GetPlayerStats_FullMethodName    = "/pb.Cricket/getPlayerStats"
	Cricket_UpdatePlayerScore_FullMethodName = "/pb.Cricket/updatePlayerScore"
)

// CricketClient is the client API for Cricket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CricketClient interface {
	GetTopScorers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TopScoreResponse, error)
	GetCenturions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CenturionsResponse, error)
	GetPlayerStats(ctx context.Context, in *PlayerRequest, opts ...grpc.CallOption) (*StatsResponse, error)
	UpdatePlayerScore(ctx context.Context, in *UpdateScoreRequest, opts ...grpc.CallOption) (*Empty, error)
}

type cricketClient struct {
	cc grpc.ClientConnInterface
}

func NewCricketClient(cc grpc.ClientConnInterface) CricketClient {
	return &cricketClient{cc}
}

func (c *cricketClient) GetTopScorers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TopScoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TopScoreResponse)
	err := c.cc.Invoke(ctx, Cricket_GetTopScorers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cricketClient) GetCenturions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CenturionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CenturionsResponse)
	err := c.cc.Invoke(ctx, Cricket_GetCenturions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cricketClient) GetPlayerStats(ctx context.Context, in *PlayerRequest, opts ...grpc.CallOption) (*StatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, Cricket_GetPlayerStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cricketClient) UpdatePlayerScore(ctx context.Context, in *UpdateScoreRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Cricket_UpdatePlayerScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CricketServer is the server API for Cricket service.
// All implementations must embed UnimplementedCricketServer
// for forward compatibility.
type CricketServer interface {
	GetTopScorers(context.Context, *Empty) (*TopScoreResponse, error)
	GetCenturions(context.Context, *Empty) (*CenturionsResponse, error)
	GetPlayerStats(context.Context, *PlayerRequest) (*StatsResponse, error)
	UpdatePlayerScore(context.Context, *UpdateScoreRequest) (*Empty, error)
	mustEmbedUnimplementedCricketServer()
}

// UnimplementedCricketServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCricketServer struct{}

func (UnimplementedCricketServer) GetTopScorers(context.Context, *Empty) (*TopScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopScorers not implemented")
}
func (UnimplementedCricketServer) GetCenturions(context.Context, *Empty) (*CenturionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCenturions not implemented")
}
func (UnimplementedCricketServer) GetPlayerStats(context.Context, *PlayerRequest) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerStats not implemented")
}
func (UnimplementedCricketServer) UpdatePlayerScore(context.Context, *UpdateScoreRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlayerScore not implemented")
}
func (UnimplementedCricketServer) mustEmbedUnimplementedCricketServer() {}
func (UnimplementedCricketServer) testEmbeddedByValue()                 {}

// UnsafeCricketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CricketServer will
// result in compilation errors.
type UnsafeCricketServer interface {
	mustEmbedUnimplementedCricketServer()
}

func RegisterCricketServer(s grpc.ServiceRegistrar, srv CricketServer) {
	// If the following call pancis, it indicates UnimplementedCricketServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Cricket_ServiceDesc, srv)
}

func _Cricket_GetTopScorers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CricketServer).GetTopScorers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cricket_GetTopScorers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CricketServer).GetTopScorers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cricket_GetCenturions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CricketServer).GetCenturions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cricket_GetCenturions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CricketServer).GetCenturions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cricket_GetPlayerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CricketServer).GetPlayerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cricket_GetPlayerStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CricketServer).GetPlayerStats(ctx, req.(*PlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cricket_UpdatePlayerScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CricketServer).UpdatePlayerScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cricket_UpdatePlayerScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CricketServer).UpdatePlayerScore(ctx, req.(*UpdateScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cricket_ServiceDesc is the grpc.ServiceDesc for Cricket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cricket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Cricket",
	HandlerType: (*CricketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getTopScorers",
			Handler:    _Cricket_GetTopScorers_Handler,
		},
		{
			MethodName: "getCenturions",
			Handler:    _Cricket_GetCenturions_Handler,
		},
		{
			MethodName: "getPlayerStats",
			Handler:    _Cricket_GetPlayerStats_Handler,
		},
		{
			MethodName: "updatePlayerScore",
			Handler:    _Cricket_UpdatePlayerScore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cricket.proto",
}
